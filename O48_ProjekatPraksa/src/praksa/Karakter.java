package praksa;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

//1.(a) –ö—Ä–µ–∏—Ä–∞—ò—Ç–µ –∫–ª–∞—Å—É –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∫–æ—ò–∞ —Å–∞–¥—Ä–∂–∏ 
//–ø–æ–¥–∞—Ç–∫–µ –∑–∞ —Å–≤–∞–∫–∏ –∫–∞—Ä–∞–∫—Ç–µ—Ä —É got_meta_data.txt —Ñ–∞—ò–ª—É.
public class Karakter extends FileHelper {

	private String ime;
	private String kuca;
	private String imeFajla;

	public Karakter() {

	}

	public Karakter(String ime, String kuca, String imeFajla) {
		super();
		this.ime = ime;
		this.kuca = kuca;
		this.imeFajla = imeFajla;
	}

	public String getIme() {
		return ime;
	}

	public void setIme(String ime) {
		this.ime = ime;
	}

	public String getKuca() {
		return kuca;
	}

	public void setKuca(String kuca) {
		this.kuca = kuca;
	}

	public String getImeFajla() {
		return imeFajla;
	}

	public void setImeFajla(String imeFajla) {
		this.imeFajla = imeFajla;
	}

	@Override
	public String toString() {
		return "Ime : " + ime + "\nkuƒáa : " + kuca + "\nmessage log file : " + imeFajla;
	}

	// 4.(–∞) –£—Ä–∞–¥–∏—Ç–∏ –∞–Ω–∞–ª–∏–∑—É –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞, –±—Ä–æ—ò–µ—õ–∏ —ö–∏—Ö–æ–≤—É —É–ø–æ—Ç—Ä–µ–±—É —Å–º–∞—ò–ª–∏—ò–∞:

	public String happyVsSad() {
		List<String> nnPoruke = loadMessages(this.getImeFajla());

		// –ö—Ä–µ–∏—Ä–∞—ö–µ —Ä–µ–≥—É–ª–∞—Ä–Ω–æ–≥ –∏–∑—Ä–∞–∑–∞ –∫–æ—ò–∏ –ø—Ä–µ–ø–æ–∑–Ω–∞—ò–µ
		// –ø–æ—Ä—É–∫—É –∫–∞–æ —Ç–µ–∫—Å—Ç –ø–æ–¥ –∑–Ω–∞—Ü–∏–º–∞ –Ω–∞–≤–æ–¥–∞.
		Pattern porukaHappy = Pattern.compile("\\üòÑ|\\üôÇ|\\üòç");
		int happy = 0;
		for (String s : nnPoruke) {
			Matcher happyMatch = porukaHappy.matcher(s);
			if (happyMatch.find())
				happy++;
		}
		Pattern porukaSad = Pattern.compile("\\üò¢|\\üò≠|\\üòû|\\üëø");
		int sad = 0;
		for (String s : nnPoruke) {
			Matcher sadMatch = porukaSad.matcher(s);
			if (sadMatch.find())
				sad++;
		}
		String raspolozenje;
		if (happy > sad)
			raspolozenje = "üòÑ";
		else if (sad > happy)
			raspolozenje = "üòû";
		else
			raspolozenje = "ü§î";
		return "\nPrepiska karaktera : " + this.getIme() + "\nBroj sreƒánih smajlija : " + happy
				+ "\nBroj tu≈ænih smajlija : " + sad + "\nRaspolo≈æenje : " + raspolozenje;
	}

	// 5. (–∞)–û–¥—à—Ç–∞–º–ø–∞—Ç–∏ –∫–∞—Ä–∞–∫—Ç–µ—Ä –∫–æ—ò–∏ –∏–º–∞ –Ω–∞—ò–ø–æ–∑–∏—Ç–∏–≤–Ω–∏—ò—É –∏ –Ω–∞—ò–Ω–µ–≥–∞—Ç–∏–≤–Ω–∏—ò—É
	// –¥–∏—Å–ø–æ–∑–∏—Ü–∏—ò—É.
	// –ú–µ—Ç–æ–¥–∞ –∑–∞ –æ–¥—Ä–µ—í–∏–≤–∞—ö–µ –¥–∏—Å–ø–æ–∑–∏—Ü–∏—ò–µ –æ–¥—Ä–µ—í–µ–Ω–æ–≥ –∫–∞—Ä–∞–∫—Ç–µ—Ä–∞.
	public int dispozicija() {
		List<String> nnPoruke = loadMessages(this.getImeFajla());
		Pattern porukaHappy = Pattern.compile("\\üòÑ|\\üôÇ|\\üòç");
		int happy = 0;
		for (String s : nnPoruke) {
			Matcher happyMatch = porukaHappy.matcher(s);
			if (happyMatch.find())
				happy++;
		}
		Pattern porukaSad = Pattern.compile("\\üò¢|\\üò≠|\\üòû|\\üëø");
		int sad = 0;
		for (String s : nnPoruke) {
			Matcher sadMatch = porukaSad.matcher(s);
			if (sadMatch.find())
				sad++;
		}
		return happy - sad;
	}

	// 6.(–∞) –î–∞ –ª–∏ Jon –≤–æ–ª–∏ Daenerys –≤–∏—à–µ –Ω–µ–≥–æ —à—Ç–æ –æ–Ω–∞ –≤–æ–ª–∏ —ö–µ–≥–∞.
	public int ljubav() {
		List<String> nnPoruke = loadMessages(this.getImeFajla());
		Pattern porukaHappy = Pattern
				.compile("(Jon Snow), (\\\".*\\\")|((Daenerys Stormborn), (\\\".*\\\")), (\\\\\\\".*\\\\\\\")");

		StringBuffer poruke = new StringBuffer();
		for (String s : nnPoruke) {
			Matcher loveMatch = porukaHappy.matcher(s);
			if (loveMatch.find()) {
				poruke.append(loveMatch.group());
				poruke.append(System.lineSeparator());
			}
		}
		Pattern lovePattern = Pattern.compile("\\üòç|\\üòò");
		int love = 0;
		for (String s : nnPoruke) {
			Matcher sadMatch = lovePattern.matcher(s);
			if (sadMatch.find())
				love++;
		}
		return love;
	}

}
